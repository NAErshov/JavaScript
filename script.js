// Выражения Функции Объекты

// Главная идея в JS это то что прктически все сущности в JS это объекты

// Объект - это набор свойств "ИМЯ: ЗНАЧЕНИЕ"
// Имена часто называют ключами

// Пример Объекта:
// {
//    visible: true, // где ключ - visible , его значение true
//    colorDepth: 24, // где ключ - colorDepth , его значение 24
//    title: 'My Image', //visible colorDepth title orientation - всё свойства данного обьекта
//    orientation: { // true 24 'My Image' - значение соответствующих свойств
//        angle: 0,
//        type: 'landscape' // - это вложенный объект
//    },
//    pixelDepth: 24,
//    width: 1440
// }

// Массив - это Объект
// Функция - это Объект
// * Число (11,5,7) - это Объект 
// * Строка - это Объект
// * - ведут себя как объекты

// Выражение - console.log('Hello World!')
//console - объект
//log - метод - это фунция которая является значением одного из свойств объекта
// . - синтаксис JS - "Точечная запись" , с её помощъю мы получаем доступ к методу
// ( ) - это вызов метода
// 'Hello World!' - аргумент (в нашем случае значение типа 'string'(сторока))

// console.log()
// console.dir() - с помощью этого метода можно отобразить в консои все свойства того или иного объкта
// console.table() - с помощью этого метода можно увидить все свойста обьекта который был передан как аргумент, то есть будет находиться в скобках, в табличном виде 

console.log('Victory')

// Вызов функции всегда возвращает значение
// в данном случае он будет undefined

// ================================================

// Выражения 
// Любое вырадение всегда возвращает значение

//Примеры выражений
// 'abc' - строка (результат этого выражения будет эта же строка)
// 10 - число (результат этого выражения будет это же значение)
// 5+2 результат этого выражения будет число 7
// с = 10 результат этого выражения будет то значение которое я присваиваю переменной, т.е. 10
// 'Good' + 'Evening' - конкотенация строк, результат этого выражения будет одна строка Good Evening
// a <= b || c !== d - выражение с несколькими операторами(|| - или, !== - не равно и <= - меньше или равно), результат этого выражения будет значение true или false
// myFunction(c, d) - вызов функции (myFunction - это имя функции которая вызывается, с и d - это аргументы с которыми мы вызываем функцию myFunction)

// ==============================================================
// выражения присваивания
// a = 20 - выражение в котором значение присваивается переменной   

// Выражения с побочными действиями
// Не только возвращает значение, но и выполняет другие действия

// a = 5
// b++ - увеличивает значение на единицу
// myFunction(c, d)

// ================================================
// Переменные
// Переменные - дают возможность повторного доступа к значениям

// Имена переменных
// PascalCase (Первая буква в слове заглавная, последующие слова также с заглавной, между словами слитно) - типы и классы
// DB_PASSWORD (Все буквы заглавные, между словами знак подчеркивания) - значения известны до запуска приложения и не меняются
// camelCase (первая буква маленькая, последующие слова с заглавной буквы, между словами слитно) - все остальные случаи

// Названия переменных должны быть понятными)))

// ==============================================

// Объявление переменных
// В JS  есть 3 ключевых слова с помощью которых обьявляются переменные:
// let - значения можно переприваивать
// conct - присваивание значения константной переменной (постоянной), новое значение нельзя присвоить
// var - не рекомендуется

// let a - это объявление переменной с названием а
// const c = 10 - это объявление и присваивание
// а = true - только присваивание

// let :
// let a = 10
// a = 20
// let b
// b = false

// const :
// const c = 10
// c = 20 
// TypeError: Assignment to constant variable.

// =============================================

// Пример с объявлением и присваиванием
// console.log(a) // ReferenceError: a is not defined

// let a
// console.log(a) // undefined

// a = true
// console.log(a) // true

// ====================================================
// Типы переменных 
// Тип переменной определяется типом присвоенного значения
// const a = 10 - десять это число, значит соответствующий тип Number
// const b = 'abc' - abc это строка, значит соответствующий тип String

// ===================================================================

// Типы
//
// Переменная
//      V
// Имеет значение
//      V
// Значение имеет тип
//
// В JS есть 6 примитивных типов:
// string (строка)
// boolean (логический) - имеет всего 2 значения true- правда, fаlse - ложь
// number (число)
// null - у него есть только одно значение и это значение null, испльзуют когда хотят указать что у переменной на данном этапе значение отсутствует, но я это явно указываю самостоятельно
// undefined -  у него есть только одно значение и это значение undefined, подразумевает что значение у переменной нету (несуществует, неопределено)
// symbol (символ)

// В JS есть 1 ссылочный тип:
// object (обьект)
// Ссылка и обьект находятся в разных местах
// Это приводит к тому что я могу иметь несколько одинаковых ссылок в разных местах памяти, которые указывают на один и тот же объект
// Это позволяет иметь разные переменные, но содержащие одинаковые ссылки и эти ссылки ссылаются на один и тот же объект
//
// На практике:
// const objectA = {
//    a: 10,
//    b: true
// }
// const copyOfA = objectA - ссылка на значение objectA
// copyOfA.a = 20 - через точку мы задаём значение конкретному параметру (в данном случае(а))
// copyOfA.с = 'abc' - добавит новый параметр (с) со значением 'abc'

// =====================================
// Динамическая типизация
//
// Пример статической типизации:
// String a = 'abc'
// int b = 10
// b = 'xyz' // Error
//
// Пример динамической типизации:
// a = 'abc' // String
// a = 10 // Number
//
// JAVASCRIPT - динамически типизируемый язык
// Ещё пример динамической типизации в JS:
// let a = 10 - сначала а это число
// a = true - меняем на логический тип
// a = 'Nikolay' - меняем на строку
// a = undefined - и меняем на undefined(неопределен)
//
// Еще пример:
// function a() {
//    console.log('Hey there')
// }
// a() // 'Hey there'
// a = 10
// a() // Uncaught TypeError: a is not a function

// =====================================================

// Я должен использовать  const везде где это возможноб
// тем самым можно предотвратить ситуации, когда случайно присваивается значение
// другого типа той или иной переменной (динамической типизацией)

// const объявляет переменную и сразу необходимо присвоить значение этой переменной и вс одной строкой
// позже новое значение присвоить нельзя, следовательно не будет проблем с динамической типизацией

// Пример ипользования const для объявления переменной
// const a = () => {
//    console.log('Hey there')
// }
// a () // 'Hey there'
// a = 10 // TypeError: Assignment to constant variable
//
// =====================================================================
//
// JAVASCRIPT - динамически типизируемый язык
// ПРАВИЛА РАБОТЫ С ПЕРЕМЕННЫМИ:
// 1. Все переменные объявлять перед их использованием
// 2. Стараться использовать const везде где это возможно

//========================================================================

// ОБЪЕКТЫ